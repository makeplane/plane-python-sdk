# coding: utf-8

"""
    Plane API

    Plane External API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from plane.models.intake_issue import IntakeIssue  # noqa: E501

class TestIntakeIssue(unittest.TestCase):
    """IntakeIssue unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IntakeIssue:
        """Test IntakeIssue
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IntakeIssue`
        """
        model = IntakeIssue()  # noqa: E501
        if include_optional:
            return IntakeIssue(
                id = '',
                issue_detail = plane.models.issue_expand.IssueExpand(
                    id = '', 
                    cycle = null, 
                    module = null, 
                    labels = [
                        plane.models.label_lite.LabelLite(
                            id = '', 
                            name = '', 
                            color = '', )
                        ], 
                    assignees = [
                        plane.models.user_lite.UserLite(
                            id = '', 
                            first_name = '', 
                            last_name = '', 
                            email = '', 
                            avatar = '', 
                            avatar_url = '', 
                            display_name = '', )
                        ], 
                    state = null, 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    point = 0, 
                    name = '', 
                    description = null, 
                    description_html = '', 
                    description_stripped = '', 
                    description_binary = 'YQ==', 
                    priority = 'urgent', 
                    start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    target_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    sequence_id = -2147483648, 
                    sort_order = 1.337, 
                    completed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    archived_at = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    is_draft = True, 
                    external_source = '', 
                    external_id = '', 
                    created_by = '', 
                    updated_by = '', 
                    project = '', 
                    workspace = '', 
                    parent = '', 
                    estimate_point = '', 
                    type = '', ),
                inbox = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                status = -2,
                snoozed_till = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                source = '',
                source_email = '',
                external_source = '',
                external_id = '',
                extra = None,
                created_by = '',
                updated_by = '',
                project = '',
                workspace = '',
                intake = '',
                issue = '',
                duplicate_to = ''
            )
        else:
            return IntakeIssue(
                id = '',
                issue_detail = plane.models.issue_expand.IssueExpand(
                    id = '', 
                    cycle = null, 
                    module = null, 
                    labels = [
                        plane.models.label_lite.LabelLite(
                            id = '', 
                            name = '', 
                            color = '', )
                        ], 
                    assignees = [
                        plane.models.user_lite.UserLite(
                            id = '', 
                            first_name = '', 
                            last_name = '', 
                            email = '', 
                            avatar = '', 
                            avatar_url = '', 
                            display_name = '', )
                        ], 
                    state = null, 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    point = 0, 
                    name = '', 
                    description = null, 
                    description_html = '', 
                    description_stripped = '', 
                    description_binary = 'YQ==', 
                    priority = 'urgent', 
                    start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    target_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    sequence_id = -2147483648, 
                    sort_order = 1.337, 
                    completed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    archived_at = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    is_draft = True, 
                    external_source = '', 
                    external_id = '', 
                    created_by = '', 
                    updated_by = '', 
                    project = '', 
                    workspace = '', 
                    parent = '', 
                    estimate_point = '', 
                    type = '', ),
                inbox = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                created_by = '',
                updated_by = '',
                project = '',
                workspace = '',
                intake = '',
                issue = '',
        )
        """

    def testIntakeIssue(self):
        """Test IntakeIssue"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
