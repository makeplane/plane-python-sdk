# coding: utf-8

"""
    Plane API

    Plane External API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from plane.models.issue import Issue  # noqa: E501

class TestIssue(unittest.TestCase):
    """Issue unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Issue:
        """Test Issue
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Issue`
        """
        model = Issue()  # noqa: E501
        if include_optional:
            return Issue(
                id = '',
                assignees = [
                    ''
                    ],
                labels = [
                    ''
                    ],
                type_id = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                point = 0,
                name = '',
                description_html = '',
                description_binary = 'YQ==',
                priority = 'urgent',
                start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                target_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                sequence_id = -2147483648,
                sort_order = 1.337,
                completed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                archived_at = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                is_draft = True,
                external_source = '',
                external_id = '',
                created_by = '',
                updated_by = '',
                project = '',
                workspace = '',
                parent = '',
                state = '',
                estimate_point = '',
                type = ''
            )
        else:
            return Issue(
                id = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                name = '',
                description_binary = 'YQ==',
                updated_by = '',
                project = '',
                workspace = '',
        )
        """

    def testIssue(self):
        """Test Issue"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
