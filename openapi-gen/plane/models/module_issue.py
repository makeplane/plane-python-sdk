# coding: utf-8

"""
    Plane API

    API documentation for my specific app

    The version of the OpenAPI document: 1.0.0 (1.0.0)
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class ModuleIssue(BaseModel):
    """
    ModuleIssue
    """
    created_at: datetime = Field(...)
    created_by: Optional[StrictStr] = Field(...)
    deleted_at: Optional[datetime] = Field(...)
    id: StrictStr = Field(...)
    issue: StrictStr = Field(...)
    module: StrictStr = Field(...)
    project: StrictStr = Field(...)
    sub_issues_count: StrictInt = Field(...)
    updated_at: datetime = Field(...)
    updated_by: Optional[StrictStr] = Field(...)
    workspace: StrictStr = Field(...)
    __properties = ["created_at", "created_by", "deleted_at", "id", "issue", "module", "project", "sub_issues_count", "updated_at", "updated_by", "workspace"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ModuleIssue:
        """Create an instance of ModuleIssue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "created_at",
                            "created_by",
                            "id",
                            "module",
                            "project",
                            "sub_issues_count",
                            "updated_at",
                            "updated_by",
                            "workspace",
                          },
                          exclude_none=True)
        # set to None if created_by (nullable) is None
        # and __fields_set__ contains the field
        if self.created_by is None and "created_by" in self.__fields_set__:
            _dict['created_by'] = None

        # set to None if deleted_at (nullable) is None
        # and __fields_set__ contains the field
        if self.deleted_at is None and "deleted_at" in self.__fields_set__:
            _dict['deleted_at'] = None

        # set to None if updated_by (nullable) is None
        # and __fields_set__ contains the field
        if self.updated_by is None and "updated_by" in self.__fields_set__:
            _dict['updated_by'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ModuleIssue:
        """Create an instance of ModuleIssue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ModuleIssue.parse_obj(obj)

        _obj = ModuleIssue.parse_obj({
            "created_at": obj.get("created_at"),
            "created_by": obj.get("created_by"),
            "deleted_at": obj.get("deleted_at"),
            "id": obj.get("id"),
            "issue": obj.get("issue"),
            "module": obj.get("module"),
            "project": obj.get("project"),
            "sub_issues_count": obj.get("sub_issues_count"),
            "updated_at": obj.get("updated_at"),
            "updated_by": obj.get("updated_by"),
            "workspace": obj.get("workspace")
        })
        return _obj


