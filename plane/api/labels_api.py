# coding: utf-8

"""
    Plane API

    Plane External API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictStr

from typing import Optional

from plane.models.create_label_request import CreateLabelRequest
from plane.models.label import Label
from plane.models.update_label_request import UpdateLabelRequest

from plane.api_client import ApiClient
from plane.api_response import ApiResponse
from plane.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class LabelsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_label(self, project_id : StrictStr, project_id2 : Annotated[StrictStr, Field(..., description="Project ID")], slug : StrictStr, slug2 : Annotated[StrictStr, Field(..., description="Workspace slug")], create_label_request : Optional[CreateLabelRequest] = None, **kwargs) -> Label:  # noqa: E501
        """Create a label  # noqa: E501

        Create a new label in the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_label(project_id, project_id2, slug, slug2, create_label_request, async_req=True)
        >>> result = thread.get()

        :param project_id: (required)
        :type project_id: str
        :param project_id2: Project ID (required)
        :type project_id2: str
        :param slug: (required)
        :type slug: str
        :param slug2: Workspace slug (required)
        :type slug2: str
        :param create_label_request:
        :type create_label_request: CreateLabelRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Label
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_label_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_label_with_http_info(project_id, project_id2, slug, slug2, create_label_request, **kwargs)  # noqa: E501

    @validate_arguments
    def create_label_with_http_info(self, project_id : StrictStr, project_id2 : Annotated[StrictStr, Field(..., description="Project ID")], slug : StrictStr, slug2 : Annotated[StrictStr, Field(..., description="Workspace slug")], create_label_request : Optional[CreateLabelRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create a label  # noqa: E501

        Create a new label in the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_label_with_http_info(project_id, project_id2, slug, slug2, create_label_request, async_req=True)
        >>> result = thread.get()

        :param project_id: (required)
        :type project_id: str
        :param project_id2: Project ID (required)
        :type project_id2: str
        :param slug: (required)
        :type slug: str
        :param slug2: Workspace slug (required)
        :type slug2: str
        :param create_label_request:
        :type create_label_request: CreateLabelRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Label, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'project_id',
            'project_id2',
            'slug',
            'slug2',
            'create_label_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_label" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['project_id'] is not None:
            _path_params['project_id'] = _params['project_id']

        if _params['slug'] is not None:
            _path_params['slug'] = _params['slug']


        # process the query parameters
        _query_params = []
        if _params.get('project_id2') is not None:  # noqa: E501
            _query_params.append(('project_id', _params['project_id2']))

        if _params.get('slug2') is not None:  # noqa: E501
            _query_params.append(('slug', _params['slug2']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_label_request'] is not None:
            _body_params = _params['create_label_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['ApiKeyAuthentication']  # noqa: E501

        _response_types_map = {
            '201': "Label",
            '400': "Label",
            '401': None,
            '403': None,
            '404': None,
        }

        return self.api_client.call_api(
            '/workspaces/{slug}/projects/{project_id}/labels/', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_label(self, id : StrictStr, pk : Annotated[StrictStr, Field(..., description="Label ID")], project_id : StrictStr, project_id2 : Annotated[StrictStr, Field(..., description="Project ID")], slug : StrictStr, slug2 : Annotated[StrictStr, Field(..., description="Workspace slug")], **kwargs) -> None:  # noqa: E501
        """Delete a label  # noqa: E501

        Delete a label in the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_label(id, pk, project_id, project_id2, slug, slug2, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param pk: Label ID (required)
        :type pk: str
        :param project_id: (required)
        :type project_id: str
        :param project_id2: Project ID (required)
        :type project_id2: str
        :param slug: (required)
        :type slug: str
        :param slug2: Workspace slug (required)
        :type slug2: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_label_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_label_with_http_info(id, pk, project_id, project_id2, slug, slug2, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_label_with_http_info(self, id : StrictStr, pk : Annotated[StrictStr, Field(..., description="Label ID")], project_id : StrictStr, project_id2 : Annotated[StrictStr, Field(..., description="Project ID")], slug : StrictStr, slug2 : Annotated[StrictStr, Field(..., description="Workspace slug")], **kwargs) -> ApiResponse:  # noqa: E501
        """Delete a label  # noqa: E501

        Delete a label in the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_label_with_http_info(id, pk, project_id, project_id2, slug, slug2, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param pk: Label ID (required)
        :type pk: str
        :param project_id: (required)
        :type project_id: str
        :param project_id2: Project ID (required)
        :type project_id2: str
        :param slug: (required)
        :type slug: str
        :param slug2: Workspace slug (required)
        :type slug2: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'pk',
            'project_id',
            'project_id2',
            'slug',
            'slug2'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_label" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']

        if _params['project_id'] is not None:
            _path_params['project_id'] = _params['project_id']

        if _params['slug'] is not None:
            _path_params['slug'] = _params['slug']


        # process the query parameters
        _query_params = []
        if _params.get('pk') is not None:  # noqa: E501
            _query_params.append(('pk', _params['pk']))

        if _params.get('project_id2') is not None:  # noqa: E501
            _query_params.append(('project_id', _params['project_id2']))

        if _params.get('slug2') is not None:  # noqa: E501
            _query_params.append(('slug', _params['slug2']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['ApiKeyAuthentication']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/workspaces/{slug}/projects/{project_id}/labels/{id}/', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_labels(self, project_id : StrictStr, project_id2 : Annotated[StrictStr, Field(..., description="Project ID")], slug : StrictStr, slug2 : Annotated[StrictStr, Field(..., description="Workspace slug")], **kwargs) -> Label:  # noqa: E501
        """Get labels  # noqa: E501

        Get all labels in the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_labels(project_id, project_id2, slug, slug2, async_req=True)
        >>> result = thread.get()

        :param project_id: (required)
        :type project_id: str
        :param project_id2: Project ID (required)
        :type project_id2: str
        :param slug: (required)
        :type slug: str
        :param slug2: Workspace slug (required)
        :type slug2: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Label
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_labels_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_labels_with_http_info(project_id, project_id2, slug, slug2, **kwargs)  # noqa: E501

    @validate_arguments
    def get_labels_with_http_info(self, project_id : StrictStr, project_id2 : Annotated[StrictStr, Field(..., description="Project ID")], slug : StrictStr, slug2 : Annotated[StrictStr, Field(..., description="Workspace slug")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get labels  # noqa: E501

        Get all labels in the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_labels_with_http_info(project_id, project_id2, slug, slug2, async_req=True)
        >>> result = thread.get()

        :param project_id: (required)
        :type project_id: str
        :param project_id2: Project ID (required)
        :type project_id2: str
        :param slug: (required)
        :type slug: str
        :param slug2: Workspace slug (required)
        :type slug2: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Label, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'project_id',
            'project_id2',
            'slug',
            'slug2'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_labels" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['project_id'] is not None:
            _path_params['project_id'] = _params['project_id']

        if _params['slug'] is not None:
            _path_params['slug'] = _params['slug']


        # process the query parameters
        _query_params = []
        if _params.get('project_id2') is not None:  # noqa: E501
            _query_params.append(('project_id', _params['project_id2']))

        if _params.get('slug2') is not None:  # noqa: E501
            _query_params.append(('slug', _params['slug2']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKeyAuthentication']  # noqa: E501

        _response_types_map = {
            '200': "Label",
            '401': None,
            '403': None,
            '404': None,
        }

        return self.api_client.call_api(
            '/workspaces/{slug}/projects/{project_id}/labels/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_labels2(self, id : StrictStr, project_id : StrictStr, project_id2 : Annotated[StrictStr, Field(..., description="Project ID")], slug : StrictStr, slug2 : Annotated[StrictStr, Field(..., description="Workspace slug")], **kwargs) -> Label:  # noqa: E501
        """Get labels  # noqa: E501

        Get all labels in the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_labels2(id, project_id, project_id2, slug, slug2, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param project_id: (required)
        :type project_id: str
        :param project_id2: Project ID (required)
        :type project_id2: str
        :param slug: (required)
        :type slug: str
        :param slug2: Workspace slug (required)
        :type slug2: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Label
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_labels2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_labels2_with_http_info(id, project_id, project_id2, slug, slug2, **kwargs)  # noqa: E501

    @validate_arguments
    def get_labels2_with_http_info(self, id : StrictStr, project_id : StrictStr, project_id2 : Annotated[StrictStr, Field(..., description="Project ID")], slug : StrictStr, slug2 : Annotated[StrictStr, Field(..., description="Workspace slug")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get labels  # noqa: E501

        Get all labels in the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_labels2_with_http_info(id, project_id, project_id2, slug, slug2, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param project_id: (required)
        :type project_id: str
        :param project_id2: Project ID (required)
        :type project_id2: str
        :param slug: (required)
        :type slug: str
        :param slug2: Workspace slug (required)
        :type slug2: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Label, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'project_id',
            'project_id2',
            'slug',
            'slug2'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_labels2" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']

        if _params['project_id'] is not None:
            _path_params['project_id'] = _params['project_id']

        if _params['slug'] is not None:
            _path_params['slug'] = _params['slug']


        # process the query parameters
        _query_params = []
        if _params.get('project_id2') is not None:  # noqa: E501
            _query_params.append(('project_id', _params['project_id2']))

        if _params.get('slug2') is not None:  # noqa: E501
            _query_params.append(('slug', _params['slug2']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKeyAuthentication']  # noqa: E501

        _response_types_map = {
            '200': "Label",
            '401': None,
            '403': None,
            '404': None,
        }

        return self.api_client.call_api(
            '/workspaces/{slug}/projects/{project_id}/labels/{id}/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_label(self, id : StrictStr, pk : Annotated[StrictStr, Field(..., description="Label ID")], project_id : StrictStr, project_id2 : Annotated[StrictStr, Field(..., description="Project ID")], slug : StrictStr, slug2 : Annotated[StrictStr, Field(..., description="Workspace slug")], update_label_request : Optional[UpdateLabelRequest] = None, **kwargs) -> Label:  # noqa: E501
        """Update a label  # noqa: E501

        Update a label in the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_label(id, pk, project_id, project_id2, slug, slug2, update_label_request, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param pk: Label ID (required)
        :type pk: str
        :param project_id: (required)
        :type project_id: str
        :param project_id2: Project ID (required)
        :type project_id2: str
        :param slug: (required)
        :type slug: str
        :param slug2: Workspace slug (required)
        :type slug2: str
        :param update_label_request:
        :type update_label_request: UpdateLabelRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Label
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_label_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_label_with_http_info(id, pk, project_id, project_id2, slug, slug2, update_label_request, **kwargs)  # noqa: E501

    @validate_arguments
    def update_label_with_http_info(self, id : StrictStr, pk : Annotated[StrictStr, Field(..., description="Label ID")], project_id : StrictStr, project_id2 : Annotated[StrictStr, Field(..., description="Project ID")], slug : StrictStr, slug2 : Annotated[StrictStr, Field(..., description="Workspace slug")], update_label_request : Optional[UpdateLabelRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update a label  # noqa: E501

        Update a label in the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_label_with_http_info(id, pk, project_id, project_id2, slug, slug2, update_label_request, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param pk: Label ID (required)
        :type pk: str
        :param project_id: (required)
        :type project_id: str
        :param project_id2: Project ID (required)
        :type project_id2: str
        :param slug: (required)
        :type slug: str
        :param slug2: Workspace slug (required)
        :type slug2: str
        :param update_label_request:
        :type update_label_request: UpdateLabelRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Label, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'pk',
            'project_id',
            'project_id2',
            'slug',
            'slug2',
            'update_label_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_label" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']

        if _params['project_id'] is not None:
            _path_params['project_id'] = _params['project_id']

        if _params['slug'] is not None:
            _path_params['slug'] = _params['slug']


        # process the query parameters
        _query_params = []
        if _params.get('pk') is not None:  # noqa: E501
            _query_params.append(('pk', _params['pk']))

        if _params.get('project_id2') is not None:  # noqa: E501
            _query_params.append(('project_id', _params['project_id2']))

        if _params.get('slug2') is not None:  # noqa: E501
            _query_params.append(('slug', _params['slug2']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['update_label_request'] is not None:
            _body_params = _params['update_label_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['ApiKeyAuthentication']  # noqa: E501

        _response_types_map = {
            '200': "Label",
            '400': "Label",
            '401': None,
            '403': None,
            '404': None,
        }

        return self.api_client.call_api(
            '/workspaces/{slug}/projects/{project_id}/labels/{id}/', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
