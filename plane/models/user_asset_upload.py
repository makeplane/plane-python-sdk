# coding: utf-8

"""
    Plane API

    Plane External API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, validator

class UserAssetUpload(BaseModel):
    """
    Serializer for user asset upload requests  # noqa: E501
    """
    name: StrictStr = Field(default=..., description="Original filename of the asset")
    type: Optional[StrictStr] = Field(default='image/jpeg', description="MIME type of the file  * `image/jpeg` - JPEG * `image/png` - PNG * `image/webp` - WebP * `image/jpg` - JPG * `image/gif` - GIF")
    size: StrictInt = Field(default=..., description="File size in bytes")
    entity_type: StrictStr = Field(default=..., description="Type of user asset  * `USER_AVATAR` - User Avatar * `USER_COVER` - User Cover")
    __properties = ["name", "type", "size", "entity_type"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('image/jpeg', 'image/png', 'image/webp', 'image/jpg', 'image/gif',):
            raise ValueError("must be one of enum values ('image/jpeg', 'image/png', 'image/webp', 'image/jpg', 'image/gif')")
        return value

    @validator('entity_type')
    def entity_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('USER_AVATAR', 'USER_COVER',):
            raise ValueError("must be one of enum values ('USER_AVATAR', 'USER_COVER')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserAssetUpload:
        """Create an instance of UserAssetUpload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserAssetUpload:
        """Create an instance of UserAssetUpload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserAssetUpload.parse_obj(obj)

        _obj = UserAssetUpload.parse_obj({
            "name": obj.get("name"),
            "type": obj.get("type") if obj.get("type") is not None else 'image/jpeg',
            "size": obj.get("size"),
            "entity_type": obj.get("entity_type")
        })
        return _obj


