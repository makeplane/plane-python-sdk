# coding: utf-8

"""
    Plane API

    Plane External API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, constr, validator

class CreateStateRequest(BaseModel):
    """
    CreateStateRequest
    """
    name: Optional[constr(strict=True, max_length=255)] = Field(default=None, description="State name")
    description: Optional[StrictStr] = Field(default=None, description="State description")
    color: Optional[StrictStr] = Field(default=None, description="State color")
    group: Optional[StrictStr] = Field(default=None, description="State group")
    default: Optional[StrictBool] = Field(default=None, description="Default state")
    __properties = ["name", "description", "color", "group", "default"]

    @validator('group')
    def group_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('backlog', 'unstarted', 'started', 'completed', 'cancelled', 'triage',):
            raise ValueError("must be one of enum values ('backlog', 'unstarted', 'started', 'completed', 'cancelled', 'triage')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateStateRequest:
        """Create an instance of CreateStateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateStateRequest:
        """Create an instance of CreateStateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateStateRequest.parse_obj(obj)

        _obj = CreateStateRequest.parse_obj({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "color": obj.get("color"),
            "group": obj.get("group"),
            "default": obj.get("default")
        })
        return _obj


