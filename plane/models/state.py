# coding: utf-8

"""
    Plane API

    Plane External API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, constr, validator

class State(BaseModel):
    """
    State
    """
    id: StrictStr = Field(...)
    created_at: datetime = Field(...)
    updated_at: datetime = Field(...)
    deleted_at: Optional[datetime] = Field(...)
    name: constr(strict=True, max_length=255) = Field(...)
    description: Optional[StrictStr] = None
    color: constr(strict=True, max_length=255) = Field(...)
    slug: Optional[constr(strict=True, max_length=100)] = None
    sequence: Optional[Union[StrictFloat, StrictInt]] = None
    group: Optional[StrictStr] = Field(default=None, description="* `backlog` - Backlog * `unstarted` - Unstarted * `started` - Started * `completed` - Completed * `cancelled` - Cancelled * `triage` - Triage")
    is_triage: Optional[StrictBool] = None
    default: Optional[StrictBool] = None
    external_source: Optional[constr(strict=True, max_length=255)] = None
    external_id: Optional[constr(strict=True, max_length=255)] = None
    created_by: Optional[StrictStr] = Field(...)
    updated_by: Optional[StrictStr] = Field(...)
    project: StrictStr = Field(...)
    workspace: StrictStr = Field(...)
    __properties = ["id", "created_at", "updated_at", "deleted_at", "name", "description", "color", "slug", "sequence", "group", "is_triage", "default", "external_source", "external_id", "created_by", "updated_by", "project", "workspace"]

    @validator('slug')
    def slug_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[-a-zA-Z0-9_]+$", value):
            raise ValueError(r"must validate the regular expression /^[-a-zA-Z0-9_]+$/")
        return value

    @validator('group')
    def group_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('backlog', 'unstarted', 'started', 'completed', 'cancelled', 'triage',):
            raise ValueError("must be one of enum values ('backlog', 'unstarted', 'started', 'completed', 'cancelled', 'triage')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> State:
        """Create an instance of State from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                            "created_at",
                            "updated_at",
                            "deleted_at",
                            "created_by",
                            "updated_by",
                            "project",
                            "workspace",
                          },
                          exclude_none=True)
        # set to None if deleted_at (nullable) is None
        # and __fields_set__ contains the field
        if self.deleted_at is None and "deleted_at" in self.__fields_set__:
            _dict['deleted_at'] = None

        # set to None if external_source (nullable) is None
        # and __fields_set__ contains the field
        if self.external_source is None and "external_source" in self.__fields_set__:
            _dict['external_source'] = None

        # set to None if external_id (nullable) is None
        # and __fields_set__ contains the field
        if self.external_id is None and "external_id" in self.__fields_set__:
            _dict['external_id'] = None

        # set to None if created_by (nullable) is None
        # and __fields_set__ contains the field
        if self.created_by is None and "created_by" in self.__fields_set__:
            _dict['created_by'] = None

        # set to None if updated_by (nullable) is None
        # and __fields_set__ contains the field
        if self.updated_by is None and "updated_by" in self.__fields_set__:
            _dict['updated_by'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> State:
        """Create an instance of State from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return State.parse_obj(obj)

        _obj = State.parse_obj({
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "deleted_at": obj.get("deleted_at"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "color": obj.get("color"),
            "slug": obj.get("slug"),
            "sequence": obj.get("sequence"),
            "group": obj.get("group"),
            "is_triage": obj.get("is_triage"),
            "default": obj.get("default"),
            "external_source": obj.get("external_source"),
            "external_id": obj.get("external_id"),
            "created_by": obj.get("created_by"),
            "updated_by": obj.get("updated_by"),
            "project": obj.get("project"),
            "workspace": obj.get("workspace")
        })
        return _obj


