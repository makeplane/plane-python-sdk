# coding: utf-8

"""
    Plane API

    Plane External API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, constr, validator

class CreateProjectRequest(BaseModel):
    """
    CreateProjectRequest
    """
    name: Optional[constr(strict=True, max_length=255)] = Field(default=None, description="Project name")
    identifier: Optional[constr(strict=True, max_length=255)] = Field(default=None, description="Project identifier")
    description: Optional[StrictStr] = Field(default=None, description="Project description")
    project_lead: Optional[StrictStr] = Field(default=None, description="Project lead")
    intake_view: Optional[StrictBool] = Field(default=None, description="Intake view")
    module_view: Optional[StrictBool] = Field(default=None, description="Module view")
    cycle_view: Optional[StrictBool] = Field(default=None, description="Cycle view")
    issue_views_view: Optional[StrictBool] = Field(default=None, description="Issue views view")
    page_view: Optional[StrictBool] = Field(default=None, description="Page view")
    network: Optional[StrictInt] = Field(default=None, description="Network")
    __properties = ["name", "identifier", "description", "project_lead", "intake_view", "module_view", "cycle_view", "issue_views_view", "page_view", "network"]

    @validator('network')
    def network_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (0, 2,):
            raise ValueError("must be one of enum values (0, 2)")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateProjectRequest:
        """Create an instance of CreateProjectRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateProjectRequest:
        """Create an instance of CreateProjectRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateProjectRequest.parse_obj(obj)

        _obj = CreateProjectRequest.parse_obj({
            "name": obj.get("name"),
            "identifier": obj.get("identifier"),
            "description": obj.get("description"),
            "project_lead": obj.get("project_lead"),
            "intake_view": obj.get("intake_view"),
            "module_view": obj.get("module_view"),
            "cycle_view": obj.get("cycle_view"),
            "issue_views_view": obj.get("issue_views_view"),
            "page_view": obj.get("page_view"),
            "network": obj.get("network")
        })
        return _obj


