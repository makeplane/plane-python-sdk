# coding: utf-8

"""
    Plane API

    Plane External API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class SearchIssues200ResponseIssuesInner(BaseModel):
    """
    SearchIssues200ResponseIssuesInner
    """
    name: Optional[StrictStr] = Field(default=None, description="Issue name")
    id: Optional[StrictStr] = Field(default=None, description="Issue ID")
    sequence_id: Optional[StrictStr] = Field(default=None, description="Issue sequence ID")
    project__identifier: Optional[StrictStr] = Field(default=None, description="Project identifier")
    project_id: Optional[StrictStr] = Field(default=None, description="Project ID")
    workspace__slug: Optional[StrictStr] = Field(default=None, description="Workspace slug")
    __properties = ["name", "id", "sequence_id", "project__identifier", "project_id", "workspace__slug"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SearchIssues200ResponseIssuesInner:
        """Create an instance of SearchIssues200ResponseIssuesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SearchIssues200ResponseIssuesInner:
        """Create an instance of SearchIssues200ResponseIssuesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SearchIssues200ResponseIssuesInner.parse_obj(obj)

        _obj = SearchIssues200ResponseIssuesInner.parse_obj({
            "name": obj.get("name"),
            "id": obj.get("id"),
            "sequence_id": obj.get("sequence_id"),
            "project__identifier": obj.get("project__identifier"),
            "project_id": obj.get("project_id"),
            "workspace__slug": obj.get("workspace__slug")
        })
        return _obj


