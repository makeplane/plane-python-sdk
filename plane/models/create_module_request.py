# coding: utf-8

"""
    Plane API

    Plane External API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr, validator

class CreateModuleRequest(BaseModel):
    """
    CreateModuleRequest
    """
    name: Optional[constr(strict=True, max_length=255)] = Field(default=None, description="Module name")
    description: Optional[StrictStr] = Field(default=None, description="Module description")
    start_date: Optional[datetime] = Field(default=None, description="Start date")
    target_date: Optional[datetime] = Field(default=None, description="Target date")
    status: Optional[StrictStr] = Field(default=None, description="Module status")
    lead: Optional[StrictStr] = Field(default=None, description="Lead user ID")
    members: Optional[conlist(StrictStr)] = None
    __properties = ["name", "description", "start_date", "target_date", "status", "lead", "members"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('backlog', 'planned', 'in-progress', 'paused', 'completed', 'cancelled',):
            raise ValueError("must be one of enum values ('backlog', 'planned', 'in-progress', 'paused', 'completed', 'cancelled')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateModuleRequest:
        """Create an instance of CreateModuleRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if start_date (nullable) is None
        # and __fields_set__ contains the field
        if self.start_date is None and "start_date" in self.__fields_set__:
            _dict['start_date'] = None

        # set to None if target_date (nullable) is None
        # and __fields_set__ contains the field
        if self.target_date is None and "target_date" in self.__fields_set__:
            _dict['target_date'] = None

        # set to None if lead (nullable) is None
        # and __fields_set__ contains the field
        if self.lead is None and "lead" in self.__fields_set__:
            _dict['lead'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateModuleRequest:
        """Create an instance of CreateModuleRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateModuleRequest.parse_obj(obj)

        _obj = CreateModuleRequest.parse_obj({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "start_date": obj.get("start_date"),
            "target_date": obj.get("target_date"),
            "status": obj.get("status"),
            "lead": obj.get("lead"),
            "members": obj.get("members")
        })
        return _obj


